한글 확인!

1. 객체지향 vs 절차지향

  흐름이 다르다!

  절차지향은 데이터가 메소드를 순서대로 지나가면서 완성품이 되고
  객체지향은 메소드가 데이터에 접근해 완성품을 만든다.


  절차지향 프로그래밍이란 물이 위에서 아래로 흐르는 것처럼 순차적인 처리가 중요시 되며
  프로그램 전체가 유기적으로 연결되도록 만드는 프로그래밍 기법입니다.
  대표적인 절차지향 언어에는 C언어가 있습니다.
  이는 컴퓨터의 작업 처리 방식과 유사하기 때문에 객체지향 언어를 사용하는 것에 비해
  더 빨리 처리되어 시간적으로 유리합니다.
  그러나 기술이 발전하고 소프트웨어와 하드웨어가 발전함에 따라 상황은 달라졌는데요.
  옛날에는 하드웨어와 소프트웨어의 개발 속도차이가 크지 않았습니다.
  하지만 소프트웨어 언어의 발달과 컴파일러의 발달로 하드웨어가
  소프트웨어의 발달을 따라오지 못하는 상황이 발생했습니다.
  이는 객체지향 언어가 등장하게 되는 계기로 작용했습니다.
  객체지향 프로그래밍은 개발하려는 것을 기능별로 묶어 모듈화를 함으로써 하드웨어가
  같은 기능을 중복으로 연산하지 않도록 하고,
  모듈을 재활용하기 때문에 하드웨어의 처리량을 획기적으로 줄여주었습니다.
http://blog.wishket.com/%EA%B0%9D%EC%B2%B4%EC%A7%80%ED%96%A5-vs-%EC%A0%88%EC%B0%A8%EC%A7%80%ED%96%A5-%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%B0%8D/

   - 객체지향
  객체: 사물
  클래스: 사물의 상태(filed)와 행위(method)를 추상화 시킨 정보가 담긴 코드의 집합, filed, constructor, Method
  인스턴스: JVM이 관리하는 메모리에 할당된 코드화 된 객체 (초기화 된 객체)

  Car는 클래스
  Car car; car 객체 선언
  car = new Car() 초기화, car를 인스턴스화 (car 객체를 JVM 메모리에 적재시키는 과정)

  인스턴스화:
    Car taxi = new Car();
    Car taxi = car.clone();
    Car taxi = car.getClaa().newInstance();

  캡슐화,
    서로 관련 있는 기능이나 데이터를 한 곳으로 모아서 효율적으로 관리 및 사용할 수 있도록 하는 것
    필요한 데이터 이외 데이터에 대한  직접적인 접근 제한, 메소드를 사용해 데이터를 조작 (은닉화)

  상속, 부모 클래스의 속성과 메소드를 자식 클래스가 물려 받는 것, 코드의 재활용성
  추상화,
    클래스: 사물을 단순화 시켜 필요한 정보와 행위를 모은 클래스
    추상 클래스: 연관된 클래스들의 공통 상태와 메소드들이 집합된 클래스, 통일성 & 강제성 부여, 생산성
  다형성,
    같은 메소드 => 다른 결과 // Overloading 컴파일 시
    같은 값 => 다른 결과// Overriding 런타임시

단점, 속도, 크기가 커짐, 메소드 호출 시 class 통째로 불러와야 함
장점, 재사용, 업그레이드, 신뢰성(완성된 class 사용), 디버깅이 쉽다.

2. Hash Code
  JVM 메모리(RAM) heap 영역의 인스턴스에 대한 참조값을 주는 방식 = hash 방식

3. 자바의 메모리 구조
  RAM을 OS가 관리
  JVM은 OS에게 메모리를 할당 받음
  이 메모리를 Runtime Data Area라고 함
  이 영역은 5개 영역으로 나누어져 관리
  class(=Method area = static area), stack, heap, native method stack, pc register
  크게 메소드, 스택, 힙으로 나누자

   - 메소드 영역
    JVM이 application을 실행하면 main method 호출하는데
    실행하기위한 application의 바이트 코드들이 저장되는 장소
    main 메소드가 사용하는 클래스와 static 변수들이 저장 되는 곳
    프로그램의 흐름을 구성하는 바이트 코드
    바이트 코드는 javac로 컴파일 된 코드들

    이런 과정을 "클래스 로딩"이라고 한다.

    =>  어떤 메소드가 로딩 되려면 해당 메소드를 가진 클래스 파일이 메모리에 로딩 되어 있어야 한다.
        그래서 클래스를 실행할 때 *.class파일을 메모리에 로딩 해준다.

      1. 어떤 메소드를 호출하는 문장을 만났는데, 그 메소드를 가진 클래스 바이트코드가 아직 로딩된 적이없다면, 곧바로 JVM은 JRE라이브러리 폴더에서 클래스를 찾음.

      2. 없으면, CLASSPATH 환경변수에 지정된 폴더에서 클래스를 찾음.

      3. 찾았으면 그 클래스 파일이 올바른지 바이트코드를 검증한다.

      4. 올바른 바이트코드라면 메소드영역으로 파일을 로딩한다.

      5. 클래스 변수를 만들라는 명령어가 있으면 메소드 영역에 그 변수를 준비한다.

      6. 클래스 블록이 있으면 순서대로 그 블록을 실행한다.

      7. 이렇게 한번 클래스의 바이트코드가 로딩되면 JVM이 종료될때까지 유지된다.

    - 스택 영역
      지역변수(local variable)과 매개변수(parameter)가 저장 되는 곳

      쉽게 말해 스택 영역에는 프로그램의 실행 과정에서 '임시로 할당'되고, 그게 끝나면 바로 소멸되는 것들이 저장된다.
      즉 => 메소드가 호출될 때마다 그 메소드의 로컬 변수를 준비하고, 메소드 호출이 끝나면 그 메소드를 위해 준비했던 모든 변수가 스택에서 제거된다.

      *참조변수에 저장되는 메모리주소는 스택영역에 저장되지만, 그 주소가 가리키는 메모리는 모두 힙 영역에 저장된다.
      힙영역에 주소값이 할당되고 그 주소에 참조데이터의 값이 저장 됨
      스택영역에는 이 주소값이 저장되고 application은 스택에 저장된 이 주소값을 호출해 데이터에 접근

    - 힙 영역
    힙 영역에는 흔히 코드에서 'new'명령을 통해 생성된 인스턴스 변수가 놓인다.
    스택과 다르게 힙 영역에 보관되는 메모리는 메소드 호출이 끝나도 사라지지 않는다.
    주소를 잃어버려 가비지 컬렉터가 정리할 때까지
    또는 JVM이 종료 될 때까지

    기본형 데이터 타입 8 가지를 제외한 나머지는 다 참조형 데이터 타입
    참조형 데이터 타입의 데이터는 실행 될 때 마다 힙영역에 데이터를 넣다 뺏다는 비효율적
    그래서 값은 힙 영역에 그 주소값은 스택영역에 저장 되어 효율적으로 관리


스택 영역의 지역변수들은 메소드가 호출되고 끝이 나는 프로그램의 실행 흐름에 관여하는 것들이고

힙 영역의 인스턴스들은지역변수가 참조하고 있는 실제의 값들을 가지고 있다.



4. 가비지 컬렉터
  주소값을 잃어버린 데이터들을 삭제하는 JVM의 기능 (메모리 관리)


5. 자바 실행 과정
  javac *.java >> class 파일로 컴파일
  java *.class >> class 파일 실행

  java 파일은 인간이 사용하는 언어 class파일은 컴퓨터가 사용하는 언어

6. 프로세스와 쓰레드
  프로세스는 운영체제로부터 자원을 할당받는 작업의 단위
  스레드는 프로세스가 할당받은 자원을 이용하는 실행의 단위

  다시 한번 말씀드리지만 위 질문에 대한
  key point는 운영체제에서 작업을 실행할 때 자원을 할당하는 단위를 알고 있느냐와
  프로그램을 멀티 스레드를 구현할 때 장.단점을 알고 있느냐에 대한 질문입니다.

  속도 => 멀티: 나눠서 실행가능
  효율적인 자원관리 => 쓰레드 간의 통신 비용이 프로세스 간 통신비용보다 적게 든다.
  * 쓰레드 간의 자원공유는 전역변수를 이용, 동기화 문제를 신경써야함



7. stack과 queue
  LIFO, FIFO

  Stack<Object> stack = new Stack<>();
  Queue q = new LinkedList();

8. HashSet<Object> set = new HashSet<>();

9. XOR 사용 ^
  예) 3 ^= 3 => 0 (비트 연산)

10. 기본형, 참조형 데이터
  call by value
  논리 boolean 1
  문자 char 2
  정수 byte 1 short 2 int 4 long 8
  실수 float 4 double 8

  call by reference (hashcode)

11. 클래스(class), 객체(Object), 인스턴스(instance) 변수

12. 추상 클래스와 인터페이스 등장 배경과 차이점

    왜 등장?
      통일성과 강제,

  - 추상 클래스가
    구성: 필드 생성자 메소드(1나 이상의 추상메소드)
    접근제어자: default, public, private, protected
    수정자: abstract
    상속: 하나만 상속 가능



    언제 사용?
    여러 비슷한 클래스들의 공통 분모를 공유하고 싶을 때
    이 클래스를 상속받는 클래스들이 특정 필드, 메소드, 접근제어자를 사용하길 원할 때
    상수가 아닌 변수를 사용하고 싶을 때


  - 인터페이스
    구성: 상수와 추상메소드, default, static(나중에 추가 됨),
    접근제어자: 디폴트가 public 생략가능
    상수: static final 생략가능
    수정자: interface
    상속: 다중 상속 가능

    extends: 상속
    implements: 구현( 구현받는 클래스는 abstract 메소드를 구현해줘야 한다.)

    왜 등장?


    언제 사용?
    별 관련이 없는 클래스가 인터페이스를 구현하길 원할 때
    특정 데이터 타입의 행위를 강제하고자 할 때 (상수)
    다중 상속을 하고 싶을 때



  *추상 클래스 객체생성
    1. 하위 클래스 이용
    2. 자신의 객체를 반환하는 static method 이용
    3. 외부 클래스 참조
    4. 자신의 생성자를 사용

  클래스 클래스 상속가능
  클래스 인터페이스 구현가능
  인터페이스 클래스 상속 불가능, 구현 불가능
  인터페이스 인터페이스 구현 가능


13. 쓰레드 구현

14. 네트워크 구현

15. 동기 비동기의 차이점


16. Array와 ArrayList

17. String과 StringBuffer, StringBuilder (불변 객체, 가변 객체)

  대부분의 객체 지향 언어에서 객체는 참조(reference) 형태로 전달하고 받는다.
  Java, C++, Python, Ruby 등이 그 예이다. 객체가 참조를 통해 공유돼 있다면
  그 상태가 언제든지 변경될 가능성도 커지므로 문제가 된다.

  불변 객체는 객체를 복제할 때 객체 전체가 아니라 단순히 참조만 복사하고 끝난다.
  참조는 보통 객체 그 자체보다 훨씬 작아서(전형적으로 포인터 크기),
  메모리가 절감되며 프로그램의 성능에도 좋다.
  가변 객체는 참조 복사 기법으로 다루기 곤란하다.
  이유는 가변 객체의 참조를 가지고 있는 어떤 장소에서 객체를 변경하면 참조를 공유하는
  모든 장소에서 그 영향을 받기 때문이다.
  이것이 의도한 동작이 아니라면 참조를 가지고 있는 다른 장소에
  변경 사실을 통지하고 대처하는 추가 대응이 필요하다.
  이런 경우 비용은 조금 들지만 참조가 아닌 객체 전체를
  방어적 복사(defensive copy) 하는 간단한 방법으로 대응할 수 있다.
  또는, Observer 패턴을 가변 객체의 변경에 대처하는 방법으로 사용할 수 있다.

  불변 객체는 멀티 스레드 프로그래밍에서도 유용하다.
  데이터가 불변 객체에 저장돼 있다면 복수의 스레드에 의해서 특정한 스레드의 데이터가
  변경될 우려없이 데이터에 접근할 수 있다.
  즉, 베타 제어(mutual exclusion)를 할 필요가 없다.
  쉽게 말해 불변 객체가 가변 객체보다 스레드 세이프(Thread-safe) 하다고 생각하면 된다.

  객체 전체 대신 참조를 복제하는 기법은
  인턴(intern, 문자열 객체를 만들면 매번 메모리에 새로운 객체가 만들어지는데
  이를 인턴하여 문자열 풀 -String Pool-에 저장하고
  그 뒤 같은 문자열이 호출되면 풀에서 참조를 복사해 반환하는 기법)으로 알려져 있다.
  인턴이 사용되고 있다면 2개의 객체가 같다고 판단되는 경우는 참조가 같은 경우다.

  String은 불변 객체
  String str = "ABC"; // ABC 값을 가진 참조영역에 할당
  str.toLowerCase();
  //str이 참조하는 값을 대문자로 변환하는 것이 아니고 "abc"라는 새로운 String 객체를
  생성 후 이 값의 주소를 stack 영역의 str에 새로이 할당 해준다.



18. 상수 vs literal
  - 상수: 변하지 않는 변수
  - static final

  참조형 변수를 상수 선언? 데이터를 바꿀 수 있을 까?
  final Object obj = new Object();
  obj = new Object(); // 불가능
  obj.firstName = "111"; // 가능

  참조형 데이터타입은 참조변수 메모리의 주소값이 불변한다는 이야기
  주소값이 가리키는 데이터의 값은 변경 가능

  따라서 인스턴스는 상수가 될 수 있다.

  - literal : 데이터 그 자체 , 변수에 넣는 변하지 않는 데이터 그 자체
  반대로 인스턴스는 literal이 될 수 없다.

  단,
  객체 리터럴이란 표현을 들어본적이 있을 것이다.
  데이터가 변하지 않도록 설계를 한 클래스를 불변 클래스라 칭한다.(immutable class)
  해당 클래스는 한번 생성하면 객체 안의 데이터가 변하지 않는다.
  변할 상황이면 새로운 객체를 만들어준다.
  자바의 String, Color 같은 클래스가 이와 같은 예이다.
  따라서 우리는 "abc" 와 같은 문자열을
  자바에서는 '객체 리터럴' 짧게는 '리터럴' 이라고 표현 하는것이다.

  위에서 설명했듯이 String 클래스로 생성된 인스턴스는 불변 객체이다.
  그래서 literal이 될 수 있다.

19. 오버라이딩, 오버로딩
  오버라이딩: 부모 클래스의 메소드를 자식 클래스에서 재정의
  오버로딩: 같은 이름의 메소드 생성가능
  (단, 매개변수(인수)의 숫자 그리고 타입이 달라야 함, 대표적으로 생성자)

20. vector와 List // 추가 수정 필요

  - vector
  일반적인 배열처럼 vector는 개체들을 연속적인 메모리 공간에 저장
  iterator와 index로 접근 가능
  vector는 동적으로 확장/축소가 가능한 dynamic array로 구성

  일반적으로 값에 대한 접근이 빠름
  중간 삽입/제거 시 List에 비해 속도가 느림

  - List
  삽입/제거가 빠름
  원소들의 순서이동이 빠르다

  index 접근불가, 검색 속도가 느림
  원소들간의 상호 연결 정보(포인터)를 위해 추가적인 메모리 사용

21. Array와 ArrayList

            크기  삭제시
  Array     불변  null
  ArrayList 가변  한 칸씩 당겨짐


22. ArrayList와 LinkedList
              추가/삭제                           index조회
  ArrayList   느림: 앞 뒤로 땡겨야 함, 크기 재조정//빠름:  무작위 접근 가능
  LinkedList  빠름: 앞 뒤의 node 설정만 바꾸면 됨//느림:  순차적 접근 가능

  이유?

  http://www.nextree.co.kr/p6506/

23. 공간 복잡도, 시간 복잡도

24. Collection (List, Set, Map)

    Collection
      List
        LinkedList
        stack
        vector
        ArrayList
        순서가 있는 데이터의 집합, 데이터 중복 허용

      Set
        HashSet
        SortedSet: TreeSet
        순서를 유지하지 않는 데이터의 집합, 데이터의 중복응 허용x

      Map
        HashTable
        HashMap
        SortedMap: TreeMap
        key와 value 한쌍으로 구성, 순서x, 키 중복x, 값 중복0


    ==========
        - hash table
        hash_map과 hash_set이 사용하는 자료구조
        테이블에 자료를 저장할때 키값을 해시 함수에 대입하여 버킷 번호가 나오면 그 버킷의 빈 슬롯에 자료를 저장
        버킷 번호에 자료를 넣으므로 많은 자료를 저장해도 삽입, 삭제, 검색 속도가 거의 일정

        - hash_map
        장점 : 많은 자료를 저장하고 있어도 검색이 빠름
        단점 : 자료가 적으면 메모리 낭비와 검색시 오버헤드 생김

        검색이 빠르다고 무분별하게 사용하면 안됨. 컨테이너를 추가 삭제하는 것은 list, vector가 훨씬 빠름
        적은 요소를 저장하여 검색을 하는 경우네는 vector,list를 사용하고 수천의 자료를 저장하여 검색을 하는 경우에는 hash_map을 사용

        map과의 차이 : 정렬 안함!

        - hash_set
        hash_map처럼 hash table을 자료구조로 사용하고 set처럼 key만을 저장
        이또한 정렬이 필요 없을때 사용할것!
        출처: <https://m.blog.naver.com/PostView.nhn?blogId=psd0217&logNo=220308769007&proxyReferer=https%3A%2F%2Fwww.google.co.kr%2F>
    =========

25. File

26. I/O

27. n I/O

28. Socket

29. Thread 구현

30. network
